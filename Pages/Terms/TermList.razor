@using Clarity_Crate.Services
@using Clarity_Crate.Models
@inject TermService TermService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager




<div class="m-auto mt-3">
    <!--MudBlazor table that show a list of Terms -->
    <!--Each Term shows its subjects-->
    <MudTable Items="Terms" Hover="true" Filter="new Func<Term,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Periodic Elements</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<Term, object>(x=>x.Name)">Term</MudTableSortLabel></MudTh>
            <MudTh>Definitions</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Term">@context.Name</MudTd>
            <MudTd DataLabel="Definitions">
                <!--Loop through the subjects-->
                @foreach (var definitions in context.Definitions)
                {
                    <MudChip Variant="Variant.Filled" Color="Color.Primary" Class="m-1">@definitions.Content</MudChip>
                }

            </MudTd>
            <MudTd DataLabel="Actions">

                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" IconColor="Color.Primary" OnClick="@(() => Edit(context.Id))">Edit</MudButton>
                <MudButton Class="ms-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => Delete(context.Id))">Delete</MudButton>
            </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudTablePager />
        </PagerContent>

    </MudTable>



</div>






<!--update curriculum dialog-->
@code {
    private List<Term> Terms = new List<Term>();
    private string searchString1 = "";
    private Term selectedItem1 = null;


    [Inject] private IDialogService DialogService { get; set; }








    //get all the Terms component is initialized

    protected override async Task OnInitializedAsync()
    {
        await TermService.GetTerms();
        Terms = TermService.Terms;


    }


    //delete method
    private async Task Delete(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
          "Delete?",
          "Are you certain you wish to delete this term?",
          yesText: "Delete", cancelText: "Cancel");

        var state = result == null ? "Cancel" : "Delete";

        //if result is not null, then its confirmed
        if (state.Equals("Delete"))
        {
            bool isSuccess = await TermService.DeleteTerm(id);
            if (isSuccess)
            {

                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("Term deleted successfully!", Severity.Success);

                await TermService.GetTerms();
                Terms = TermService.Terms;


                StateHasChanged();
            }
            else
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
                Snackbar.Add("An error occurred while deleting the Term", Severity.Error);
            }
        }


    }
    //edit method
    private void Edit(int id)
    {

        //redirect to the edit page
        NavigationManager.NavigateTo($"/Terms/edit/{id}");
    }

    private bool FilterFunc1(Term element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Term element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
      
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
       
        return false;
    }




}


