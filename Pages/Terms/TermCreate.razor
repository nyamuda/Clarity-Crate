@inject TermService TermService
@inject TopicService TopicService
@inject CurriculumService CurriculumService
@inject SubjectService SubjectService
@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@using Clarity_Crate.Models
@page "/add-term"


<div class="container text-start m-auto">
    <h2>Add a new Term</h2>

    <EditForm Model="@TermDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField Required @bind-Value="TermDto.Name"
                          For="@(() => TermDto.Name)"
                          Immediate="true"
                          Label="Name" />


        </div>

        <div class="mb-3">

            <MudTextField Required @bind-Value="TermDto.Definition"
                          For="@(() => TermDto.Definition)"
                          Immediate="true"
                          Label="Definition" />


        </div>
        
       
        <MudSelect Required ValueChanged="FilterSubjects" HelperText="The curriculum the term falls under" T="Curriculum" Label="Curriculum" Variant="Variant.Text" ToStringFunc="@curriculumConverter">
            @foreach (var curriculum in curriculums)
            {
                <MudSelectItem Value="@curriculum">@curriculum.Name</MudSelectItem>
            }
        </MudSelect>

        <!--Disable the subject select input if not curriculum is selected-->


        <MudSelect Required disabled="@(TermDto.Curriculum==null)" ValueChanged="FilterTopics" HelperText="The subject the term falls under" T="Subject" Label="Subject" Variant="Variant.Text" ToStringFunc="@subjectConverter">
            @foreach (var subject in subjects)
            {
                <MudSelectItem Value="@subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>


        <MudSelect Required disabled="@(TermDto.Subject==null)" @bind-Value="TermDto.Topic" HelperText="The topic the term falls under" T="Topic" Label="Topic" Variant="Variant.Text" ToStringFunc="@topicConverter">
            @foreach (var topic in topics)
            {
                <MudSelectItem Value="@topic">@topic.Name</MudSelectItem>
            }
        </MudSelect>



        <MudButton Class="mt-5" Disabled="@TermService.isProcessing" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" ButtonType="ButtonType.Submit">
            @if (TermService.isProcessing)
            {
                <MudProgressCircular Class="ms-n1 text-light" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Please wait...</MudText>
            }
            else
            {
                <MudText>Create</MudText>
            }
        </MudButton>
    </EditForm>




</div>
@code {
    private TermCreateDto TermDto { get; set; } = new TermCreateDto();
    private List<Topic> topics = new List<Topic>();
    private List<Subject> subjects= new List<Subject>();
    private List<Curriculum> curriculums=new List<Curriculum>();
    private Topic SelectedTopic { get; set; }


    private async Task HandleValidSubmit()
    {
        //first create a definition
        Definition definition = new Definition()
        {
            Content=TermDto.Definition,
            TopicId=TermDto.Topic.Id,
            CurriculumId=TermDto.Curriculum.Id,
            SubjectId=TermDto.Subject.Id

        };

        //then create a term
        Term term = new Term()
        {
            Name=TermDto.Name,

        };

        await TermService.CreateTerm(term, definition);

        //redirect to the terms page
        NavigationManager.NavigateTo("/terms");

    }
    protected override async Task OnInitializedAsync()
    {
        //get all the topics, subjects and curriculums
        await TopicService.GetTopics();
        await CurriculumService.GetCurricula();
        await SubjectService.GetSubjects();

        topics= TopicService.Topics;
        subjects= SubjectService.Subjects;
        curriculums= CurriculumService.Curriculums;
    }

    //filter the subjects based on the selected curriculum
    private void FilterSubjects(Curriculum selected)
    {
        //when a curriculum is selected
        //clear the subject and topic
        TermDto.Subject = null;
        TermDto.Topic = null;
        TermDto.Curriculum = selected;
        //a subject can have multiple curricula
        //get all the subjects that have the selected curriculum
       subjects = SubjectService.Subjects.Where(s => s.Curriculums.Any(c => c.Id == selected.Id)).ToList();

       StateHasChanged();

       
    }

    //filter the topics based on the selected subject
    private void FilterTopics(Subject selected)
    {
        
        TermDto.Subject = selected;
        //a topic can have multiple subjects
        //get all the topics that have the selected subject
        topics = TopicService.Topics.Where(t => t.Subjects.Any(s => s.Id == selected.Id)).ToList();
        
        StateHasChanged();
    }


    Func<Topic, string> topicConverter = p => p?.Name;
    Func<Subject, string> subjectConverter = p => p?.Name;
    Func<Curriculum, string> curriculumConverter = p => p?.Name;


}