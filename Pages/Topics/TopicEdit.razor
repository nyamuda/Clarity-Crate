@inject TopicService TopicService
@inject SubjectService SubjectService
@using Clarity_Crate.Services
@using Clarity_Crate.Dtos
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@using Clarity_Crate.Models
@page "/topics/edit/{topicId:int}"


<div class="container text-start m-auto">
    <h2>Add a new topic</h2>

    <EditForm Model="@TopicDto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />


        <div class="mb-3">

            <MudTextField Required @bind-Value="TopicDto.Name"
                          For="@(() => TopicDto.Name)"
                          Immediate="true"
                          Label="Name" />


        </div>

        <MudSelect T="Subject" Label="Subject" ToStringFunc="@converter" MultiSelection="true" @bind-SelectedValues="TopicDto.SelectedTopics">
            @foreach (var subject in AllSubjects)
            {
                <MudSelectItem  T="Subject" Value="@subject">@subject.Name</MudSelectItem>
            }
        </MudSelect>



        <MudButton Class="mt-5" Disabled="@TopicService.isProcessing" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" ButtonType="ButtonType.Submit">
            @if (TopicService.isProcessing)
            {
                <MudProgressCircular Class="ms-n1 text-light" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Please wait...</MudText>
            }
            else
            {
                <MudText>Update topic</MudText>
            }
        </MudButton>
    </EditForm>
</div>
@code {
    private TopicUpdateDto TopicDto { get; set; } = new TopicUpdateDto();
    private List<Subject> AllSubjects { get; set; } = new List<Subject>();
    [Parameter]
    public int TopicId { get; set; }





    private async Task HandleValidSubmit()
    {
        //add the new curriculum to the database
        Topic topic = new Topic()
            {
                Name = TopicDto.Name,
                Subjects = TopicDto.SelectedTopics.ToList()
            };
        bool isSuccess=  await TopicService.UpdateTopic(TopicId, topic);

        if(isSuccess)
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add("Topic updated successfully", Severity.Success);
        }
        else
        {
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomCenter;
            Snackbar.Add("An error occurred while updating the topic", Severity.Error);
        }

        //redirect to the curriculums page
        NavigationManager.NavigateTo("/topics");

    }
    protected override async Task OnInitializedAsync()
    {
        //get the topic to be edited
        Topic topic = await TopicService.GetTopicById(TopicId);
        //get all subjects
        await SubjectService.GetSubjects();
        AllSubjects = SubjectService.Subjects;


        //initialize the TopicDto
        TopicDto = new TopicUpdateDto()
        {
            Name = topic.Name,
            SelectedTopics = topic.Subjects
        };
    }


    Func<Subject, string> converter = p => p?.Name;


}